{
  "address": "0x53921a42AF687ea445A773A7137Ef1A692756389",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsAlreadyPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotRegistry",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "OCRResponse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "SBT_Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "institute_adress",
          "type": "address"
        }
      ],
      "name": "addInstitute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "addSimulatedRequestId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Functions.Location",
              "name": "codeLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.Location",
              "name": "secretsLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.CodeLanguage",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "args",
              "type": "string[]"
            }
          ],
          "internalType": "struct Functions.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "secrets",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "executeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instituteCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "is_admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_institute",
          "type": "address"
        }
      ],
      "name": "is_institute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "comp_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "carb_credits",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "issue_date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ind_id",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "institute_adress",
          "type": "address"
        }
      ],
      "name": "removeInstitute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setGasLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setSubscriptionId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "updateOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb3213b39095db8597a9f7611bcbe8a48954bad386ded613950b60a482a0fa48",
  "receipt": {
    "to": null,
    "from": "0x02AfC92a4f85F568375F77360C4385F12c75858C",
    "contractAddress": "0x53921a42AF687ea445A773A7137Ef1A692756389",
    "transactionIndex": 45,
    "gasUsed": "5250000",
    "logsBloom": "0x
    "blockHash": "0x8d3ff9a1373a0be26172278d76ef4e3b78b9781bec39e40847d7f62796f6d19a",
    "transactionHash": "0xbb3213b39095db8597a9f7611bcbe8a48954bad386ded613950b60a482a0fa48",
    "logs": [],
    "blockNumber": 3665089,
    "cumulativeGasUsed": "10829248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x649a2C205BE7A3d5e99206CEEFF30c794f0E31EC"
  ],
  "numDeployments": 1,
  "solcInputHash": "6183443cd6cef5d03feef36241b824b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"OCRResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"SBT_Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"institute_adress\",\"type\":\"address\"}],\"name\":\"addInstitute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"addSimulatedRequestId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"executeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instituteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"is_admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_institute\",\"type\":\"address\"}],\"name\":\"is_institute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"comp_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"carb_credits\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issue_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ind_id\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"institute_adress\",\"type\":\"address\"}],\"name\":\"removeInstitute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"updateOracleAddress(address)\":{\"params\":{\"oracle\":\"New oracle address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"updateOracleAddress(address)\":{\"notice\":\"Allows the Functions oracle address to be updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SbtConvertible.sol\":\"SbtConvertible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"../../vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"../../vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds Inline user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds Remote user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param encryptedSecretsURLs Encrypted comma-separated string of URLs pointing to off-chain secrets\\n   */\\n  function addRemoteSecrets(Request memory self, bytes memory encryptedSecretsURLs) internal pure {\\n    if (encryptedSecretsURLs.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.secrets = encryptedSecretsURLs;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x95ad8a831b87cb7e43e0e1fe912551aba57e18b2b242f616e8c31421dbd75994\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface private s_oracle;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xedb75afbeb408ee12fbd5fbad12abd0e782c158f9193ca9c8d23ee21c354ee85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x000e85694020a044911174ee5492f44836080cf2efd45eddcef4d28aae82d58f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Institutes.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ncontract Institutes {\\n    // Add owner constructor\\n    struct Institute {\\n        string name;\\n        string description;\\n        bool active;\\n    }\\n    address private owner;\\n    uint256 institutes_count;\\n\\n    mapping(address => Institute) internal institutes;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        // institutes_count = 0;\\n    }\\n\\n    function addInstitute(\\n        string memory name,\\n        string memory description,\\n        address institute_adress\\n    ) external {\\n        require(owner == msg.sender, \\\"No sufficient right\\\");\\n        Institute memory _institute = Institute(name, description, true);\\n        institutes[institute_adress] = _institute;\\n        institutes_count++;\\n    }\\n\\n    function removeInstitute(address institute_adress) external {\\n        require(owner == msg.sender, \\\"No sufficient right\\\");\\n        institutes[institute_adress].active = false;\\n        institutes_count--;\\n    }\\n\\n    function instituteCount() public view returns (uint256) {\\n        return institutes_count;\\n    }\\n\\n    modifier onlyInstitute() {\\n        require(\\n            institutes[msg.sender].active == true,\\n            \\\"Needs to be valid institute\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAllOwner() {\\n        require(owner == msg.sender, \\\"No sufficient right as owner\\\");\\n        _;\\n    }\\n\\n    function is_admin(address _admin) public view returns (bool) {\\n        if (_admin == owner) return true;\\n        return false;\\n    }\\n\\n    function is_institute(address _institute) public view returns (bool) {\\n        if (institutes[_institute].active) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x11f05105be524929444e6e06a39e26e1a160be00bb8c7a7c6a2d3ab8f0529d41\"},\"contracts/SbtConvertible.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./Institutes.sol\\\";\\n\\nimport {Functions, FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\\\"; // Once published\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\n\\ncontract SbtConvertible is\\n    ERC721URIStorage,\\n    Institutes,\\n    FunctionsClient,\\n    ConfirmedOwner\\n{\\n    address private _owner;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    using Functions for Functions.Request;\\n\\n    event SBT_Burnt(uint256 tokenId, string tokenURI);\\n\\n    bytes32 public latestRequestId;\\n    bytes public latestResponse;\\n    bytes public latestError;\\n\\n    uint32 public gasLimit = 250000;\\n    uint64 public subscriptionId = 0;\\n    string source =\\n        string(\\n            abi.encodePacked(\\n                \\\"let jsonObject = JSON.parse(args[0]);\\\",\\n                \\\"const principalAmount = parseInt(jsonObject.carbon_credits);\\\",\\n                \\\"return Functions.encodeUint256(Math.round(principalAmount));\\\"\\n            )\\n        );\\n\\n    function setGasLimit(uint32 _gasLimit) public onlyAllOwner returns (bool) {\\n        gasLimit = _gasLimit;\\n        return true;\\n    }\\n\\n    function setSubscriptionId(\\n        uint64 _subscriptionId\\n    ) public onlyAllOwner returns (bool) {\\n        subscriptionId = _subscriptionId;\\n        return true;\\n    }\\n\\n    event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\\n\\n    constructor(\\n        address oracle\\n    )\\n        ERC721(\\\"Convertible Carbon-Credits SBT\\\", \\\"CCCSBT\\\")\\n        FunctionsClient(oracle)\\n        ConfirmedOwner(msg.sender)\\n    {}\\n\\n    function executeRequest(\\n        string memory source,\\n        bytes memory secrets,\\n        string[] memory args,\\n        uint64 subscriptionId,\\n        uint32 gasLimit\\n    ) public onlyOwner returns (bytes32) {\\n        Functions.Request memory req;\\n        req.initializeRequest(\\n            Functions.Location.Inline,\\n            Functions.CodeLanguage.JavaScript,\\n            source\\n        );\\n        if (secrets.length > 0) {\\n            req.addRemoteSecrets(secrets);\\n        }\\n        if (args.length > 0) req.addArgs(args);\\n\\n        bytes32 assignedReqID = sendRequest(req, subscriptionId, gasLimit);\\n        latestRequestId = assignedReqID;\\n        return assignedReqID;\\n    }\\n\\n    /**\\n     * @notice Callback that is invoked once the DON has resolved the request or hit an error\\n     *\\n     * @param requestId The request ID, returned by sendRequest()\\n     * @param response Aggregated response from the user code\\n     * @param err Aggregated error from the user code or from the execution pipeline\\n     * Either response or error parameter will be set, but never both\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        latestResponse = response;\\n        latestError = err;\\n        emit OCRResponse(requestId, response, err);\\n    }\\n\\n    /**\\n     * @notice Allows the Functions oracle address to be updated\\n     *\\n     * @param oracle New oracle address\\n     */\\n    function updateOracleAddress(address oracle) public onlyOwner {\\n        setOracle(oracle);\\n    }\\n\\n    function addSimulatedRequestId(\\n        address oracleAddress,\\n        bytes32 requestId\\n    ) public onlyOwner {\\n        addExternalRequest(oracleAddress, requestId);\\n    }\\n\\n    struct SBT {\\n        string institute_name; // address of institute\\n        string company_name; //can be enum\\n        string carbon_credits;\\n        string issue_date;\\n        string industry_id;\\n        string description;\\n    }\\n\\n    function SBT_to_string(\\n        SBT memory exp\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"institute_name\\\":',\\n                    exp.institute_name,\\n                    '\\\"company_name\\\":',\\n                    exp.company_name,\\n                    ', \\\"carbon_credits\\\":',\\n                    exp.carbon_credits,\\n                    ', \\\"issue_date\\\":',\\n                    exp.issue_date,\\n                    ', \\\"industry_id\\\":',\\n                    exp.industry_id,\\n                    ', \\\"description\\\":',\\n                    exp.description,\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    // already available in base class\\n    // function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\\n\\n    //overriding trasfer functions of ERC721 to make the token soulbound\\n    // this function is disabled since we don;t want to allow transfers\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        revert(\\\"Transfer not supported for soul bound token.\\\");\\n    }\\n\\n    // this function is disabled since we don;t want to allow transfers\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        revert(\\\"Transfer not supported for soul bound token.\\\");\\n    }\\n\\n    // this function is disabled since we don;t want to allow transfers\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public virtual override {\\n        revert(\\\"Transfer not supported for soul bound token.\\\");\\n    }\\n\\n    // this function is disabled since we don;t want to allow transfers\\n    function approve(address _to, uint256 _tokenId) public virtual override {\\n        revert(\\\"Transfer not supported for soul bound token.\\\");\\n    }\\n\\n    // this function is disabled since we don't want to allow transfers\\n    function setApprovalForAll(\\n        address _operator,\\n        bool _approved\\n    ) public virtual override {\\n        revert(\\\"Transfer not supported for soul bound token.\\\");\\n    }\\n\\n    // this function is disabled since we don;t want to allow transfers\\n    function getApproved(\\n        uint256 _tokenId\\n    ) public view override returns (address) {\\n        return address(0x0);\\n    }\\n\\n    function mint(\\n        address receiver,\\n        string memory comp_name,\\n        string memory carb_credits,\\n        string memory description,\\n        string memory issue_date,\\n        string memory ind_id\\n    ) public onlyInstitute returns (bool) {\\n        address inst_address = msg.sender;\\n        string memory inst_name = institutes[inst_address].name;\\n        SBT memory credits_sbt = SBT(\\n            inst_name,\\n            comp_name,\\n            carb_credits,\\n            issue_date,\\n            ind_id,\\n            description\\n        );\\n        _tokenIds.increment();\\n        uint256 newNftTokenId = _tokenIds.current();\\n        _mint(receiver, newNftTokenId);\\n        _setTokenURI(newNftTokenId, SBT_to_string(credits_sbt));\\n        return true;\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721Burnable: caller is not owner nor approved\\\"\\n        );\\n        string memory tokenData = tokenURI(tokenId);\\n        string[] memory tokenArray = new string[](1);\\n        tokenArray[0] = tokenData;\\n\\n        // check if token is already burned\\n        require(bytes(tokenData).length > 0, \\\"Token already burned\\\");\\n\\n        executeRequest(source, \\\"\\\", tokenArray, subscriptionId, gasLimit);\\n\\n        _burn(tokenId);\\n        emit SBT_Burnt(tokenId, tokenData);\\n    }\\n}\\n\",\"keccak256\":\"0xbba1772c22b7a0961c2678ad04a5c3e7e190a09fa1305a77b6544295be2a5bda\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638f8e94c911610125578063d4b39175116100ad578063f41abb281161007c578063f41abb2814610685578063f68016b7146106a1578063f7023bb6146106bf578063fefb21a4146106db578063fffeb84e146106f95761021c565b8063d4b39175146105d9578063e985e9c514610609578063ea7b4f7714610639578063f2fde38b146106695761021c565b8063aac132de116100f4578063aac132de14610521578063b88d4fde14610551578063bef3a2f01461056d578063c87b56dd1461058b578063d328a91e146105bb5761021c565b80638f8e94c91461049b57806395d89b41146104b7578063a22cb465146104d5578063a673dd4b146104f15761021c565b806327714589116101a857806352d84c621161017757806352d84c62146103e35780636352211e1461041357806370a082311461044357806379ba5097146104735780638da5cb5b1461047d5761021c565b8063277145891461035f57806330bda99d1461038f57806342842e0e146103ab57806342966c68146103c75761021c565b806309c1ba2e116101ef57806309c1ba2e146102bb5780630ca76175146102d95780630d7c43f5146102f55780631aa46f591461032557806323b872dd146103435761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b600480360381019061023691906136b1565b610717565b60405161024891906136f9565b60405180910390f35b6102596107f9565b60405161026691906137a4565b60405180910390f35b610289600480360381019061028491906137fc565b61088b565b604051610296919061386a565b60405180910390f35b6102b960048036038101906102b491906138b1565b610892565b005b6102c36108cd565b6040516102d09190613914565b60405180910390f35b6102f360048036038101906102ee9190613a9a565b6108e7565b005b61030f600480360381019061030a9190613bc6565b6109f4565b60405161031c91906136f9565b60405180910390f35b61032d610bd7565b60405161033a9190613cee565b60405180910390f35b61035d60048036038101906103589190613d09565b610bdd565b005b61037960048036038101906103749190613eaa565b610c18565b6040516103869190613cee565b60405180910390f35b6103a960048036038101906103a49190613f79565b610ca2565b005b6103c560048036038101906103c09190613d09565b610cb8565b005b6103e160048036038101906103dc91906137fc565b610cf3565b005b6103fd60048036038101906103f89190613fb9565b610f1d565b60405161040a91906136f9565b60405180910390f35b61042d600480360381019061042891906137fc565b610fd9565b60405161043a919061386a565b60405180910390f35b61045d60048036038101906104589190613fe6565b61105f565b60405161046a9190614022565b60405180910390f35b61047b611116565b005b6104856112ad565b604051610492919061386a565b60405180910390f35b6104b560048036038101906104b0919061403d565b6112d7565b005b6104bf611436565b6040516104cc91906137a4565b60405180910390f35b6104ef60048036038101906104ea91906140f4565b6114c8565b005b61050b60048036038101906105069190613fe6565b611503565b60405161051891906136f9565b60405180910390f35b61053b60048036038101906105369190613fe6565b61156d565b60405161054891906136f9565b60405180910390f35b61056b60048036038101906105669190614134565b6115d7565b005b610575611612565b604051610582919061420c565b60405180910390f35b6105a560048036038101906105a091906137fc565b6116a0565b6040516105b291906137a4565b60405180910390f35b6105c36117b2565b6040516105d0919061420c565b60405180910390f35b6105f360048036038101906105ee9190614376565b61184f565b6040516106009190614420565b60405180910390f35b610623600480360381019061061e919061443b565b611905565b60405161063091906136f9565b60405180910390f35b610653600480360381019061064e919061447b565b611999565b60405161066091906136f9565b60405180910390f35b610683600480360381019061067e9190613fe6565b611a5d565b005b61069f600480360381019061069a9190613fe6565b611a71565b005b6106a9611b77565b6040516106b691906144b7565b60405180910390f35b6106d960048036038101906106d49190613fe6565b611b8d565b005b6106e3611ba1565b6040516106f09190614022565b60405180910390f35b610701611bab565b60405161070e919061420c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107e257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107f257506107f182611c39565b5b9050919050565b60606000805461080890614501565b80601f016020809104026020016040519081016040528092919081815260200182805461083490614501565b80156108815780601f1061085657610100808354040283529160200191610881565b820191906000526020600020905b81548152906001019060200180831161086457829003601f168201915b5050505050905090565b6000919050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906145a4565b60405180910390fd5b601360049054906101000a900467ffffffffffffffff1681565b82600b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610980576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a26109ee848484611ca3565b50505050565b600060011515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390614610565b60405180910390fd5b60003390506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054610ae090614501565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c90614501565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b5050505050905060006040518060c001604052808381526020018a8152602001898152602001878152602001868152602001888152509050610b9b600f611d02565b6000610ba7600f611d18565b9050610bb38b82611d26565b610bc581610bc084611f43565b611f8e565b60019450505050509695505050505050565b60105481565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f906145a4565b60405180910390fd5b6000610c22611ffb565b610c2a613563565b610c42600080898461208d909392919063ffffffff16565b600086511115610c6057610c5f868261213790919063ffffffff16565b5b600085511115610c7e57610c7d85826121b090919063ffffffff16565b5b6000610c8b8286866121f8565b905080601081905550809250505095945050505050565b610caa611ffb565b610cb482826123c1565b5050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea906145a4565b60405180910390fd5b610d04610cfe6124b2565b826124ba565b610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a906146a2565b60405180910390fd5b6000610d4e826116a0565b90506000600167ffffffffffffffff811115610d6d57610d6c61396f565b5b604051908082528060200260200182016040528015610da057816020015b6060815260200190600190039081610d8b5790505b5090508181600081518110610db857610db76146c2565b5b60200260200101819052506000825111610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe9061473d565b60405180910390fd5b610ed560148054610e1790614501565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4390614501565b8015610e905780601f10610e6557610100808354040283529160200191610e90565b820191906000526020600020905b815481529060010190602001808311610e7357829003601f168201915b50505050506040518060200160405280600081525083601360049054906101000a900467ffffffffffffffff16601360009054906101000a900463ffffffff16610c18565b50610edf8361254f565b7faf0d276201be3f234aa87ab604c2279edb9d3e0c799379fa82a6e70845eda1438383604051610f1092919061475d565b60405180910390a1505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa6906147d9565b60405180910390fd5b81601360006101000a81548163ffffffff021916908363ffffffff16021790555060019050919050565b600080610fe5836125a2565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104d90614845565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c6906148d7565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119d90614943565b60405180910390fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135e906149af565b60405180910390fd5b6000604051806060016040528085815260200184815260200160011515815250905080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816113de9190614b7b565b5060208201518160010190816113f49190614b7b565b5060408201518160020160006101000a81548160ff0219169083151502179055509050506008600081548092919061142b90614c7c565b919050555050505050565b60606001805461144590614501565b80601f016020809104026020016040519081016040528092919081815260200182805461147190614501565b80156114be5780601f10611493576101008083540402835291602001916114be565b820191906000526020600020905b8154815290600101906020018083116114a157829003601f168201915b5050505050905090565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fa906145a4565b60405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16156115635760019050611568565b600090505b919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cd57600190506115d2565b600090505b919050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611609906145a4565b60405180910390fd5b6011805461161f90614501565b80601f016020809104026020016040519081016040528092919081815260200182805461164b90614501565b80156116985780601f1061166d57610100808354040283529160200191611698565b820191906000526020600020905b81548152906001019060200180831161167b57829003601f168201915b505050505081565b60606116ab826125df565b60006006600084815260200190815260200160002080546116cb90614501565b80601f01602080910402602001604051908101604052809291908181526020018280546116f790614501565b80156117445780601f1061171957610100808354040283529160200191611744565b820191906000526020600020905b81548152906001019060200180831161172757829003601f168201915b50505050509050600061175561262a565b9050600081510361176a5781925050506117ad565b60008251111561179f578082604051602001611787929190614d00565b604051602081830303815290604052925050506117ad565b6117a884612641565b925050505b919050565b6060600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d328a91e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611821573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061184a9190614d94565b905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d227d24585611899886126a9565b86866040518563ffffffff1660e01b81526004016118ba9493929190614ddd565b602060405180830381865afa1580156118d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fb9190614e55565b9050949350505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a22906147d9565b60405180910390fd5b81601360046101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050919050565b611a65611ffb565b611a6e816129ab565b50565b3373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af8906149af565b60405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690831515021790555060086000815480929190611b6f90614e82565b919050555050565b601360009054906101000a900463ffffffff1681565b611b95611ffb565b611b9e81612ad9565b50565b6000600854905090565b60128054611bb890614501565b80601f0160208091040260200160405190810160405280929190818152602001828054611be490614501565b8015611c315780601f10611c0657610100808354040283529160200191611c31565b820191906000526020600020905b815481529060010190602001808311611c1457829003601f168201915b505050505081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8160119081611cb29190614f06565b508060129081611cc29190614f06565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115628383604051611cf5929190614fd8565b60405180910390a2505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8c9061505b565b60405180910390fd5b611d9e81612b1d565b15611dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd5906150c7565b60405180910390fd5b611dec600083836001612b5e565b611df581612b1d565b15611e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2c906150c7565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f3f600083836001612c84565b5050565b6060816000015182602001518360400151846060015185608001518660a00151604051602001611f78969594939291906152fb565b6040516020818303038152906040529050919050565b611f9782612b1d565b611fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcd90615412565b60405180910390fd5b80600660008481526020019081526020016000209081611ff69190614b7b565b505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461208b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120829061547e565b60405180910390fd5b565b60008151036120c8576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82846000019060018111156120e0576120df61549e565b5b908160018111156120f4576120f361549e565b5b8152505081846040019060008111156121105761210f61549e565b5b908160008111156121245761212361549e565b5b8152505080846060018190525050505050565b6000815103612172576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018260200190600181111561218b5761218a61549e565b5b9081600181111561219f5761219e61549e565b5b815250508082608001819052505050565b60008151036121eb576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808260a001819052505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328242b0485612243886126a9565b866040518463ffffffff1660e01b8152600401612262939291906154cd565b6020604051808303816000875af1158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a59190615520565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123389190615562565b600b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a2809150509392505050565b80600073ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461245b576040517f8b457ad200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600033905090565b6000806124c683610fd9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061250857506125078185611905565b5b8061254657508373ffffffffffffffffffffffffffffffffffffffff1661252e8461088b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b61255881612c8a565b600060066000838152602001908152602001600020805461257890614501565b90501461259f5760066000828152602001908152602001600020600061259e91906135ce565b5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6125e881612b1d565b612627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261e90614845565b60405180910390fd5b50565b606060405180602001604052806000815250905090565b606061264c826125df565b600061265661262a565b9050600081511161267657604051806020016040528060008152506126a1565b8061268084612dd8565b604051602001612691929190614d00565b6040516020818303038152906040525b915050919050565b60606126b361360e565b6126bf81610100612ea6565b506127086040518060400160405280600c81526020017f636f64654c6f636174696f6e000000000000000000000000000000000000000081525082612f1090919063ffffffff16565b612731836000015160018111156127225761272161549e565b5b82612f3590919063ffffffff16565b6127796040518060400160405280600881526020017f6c616e677561676500000000000000000000000000000000000000000000000081525082612f1090919063ffffffff16565b6127a2836040015160008111156127935761279261549e565b5b82612f3590919063ffffffff16565b6127ea6040518060400160405280600681526020017f736f75726365000000000000000000000000000000000000000000000000000081525082612f1090919063ffffffff16565b612801836060015182612f1090919063ffffffff16565b60008360a001515111156128bf576128576040518060400160405280600481526020017f617267730000000000000000000000000000000000000000000000000000000081525082612f1090919063ffffffff16565b61286081612f65565b60005b8360a00151518110156128b4576128a18460a00151828151811061288a576128896146c2565b5b602002602001015183612f1090919063ffffffff16565b80806128ac90614c7c565b915050612863565b506128be81612f73565b5b6000836080015151111561299e576129156040518060400160405280600f81526020017f736563726574734c6f636174696f6e000000000000000000000000000000000081525082612f1090919063ffffffff16565b61293e8360200151600181111561292f5761292e61549e565b5b82612f3590919063ffffffff16565b6129866040518060400160405280600781526020017f736563726574730000000000000000000000000000000000000000000000000081525082612f1090919063ffffffff16565b61299d836080015182612f8190919063ffffffff16565b5b8060000151915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a10906155db565b60405180910390fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16612b3f836125a2565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001811115612c7e57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612bf25780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bea91906155fb565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612c7d5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c75919061562f565b925050819055505b5b50505050565b50505050565b6000612c9582610fd9565b9050612ca5816000846001612b5e565b612cae82610fd9565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612dd4816000846001612c84565b5050565b606060006001612de784612fa6565b01905060008167ffffffffffffffff811115612e0657612e0561396f565b5b6040519080825280601f01601f191660200182016040528015612e385781602001600182028036833780820191505090505b509050600082602001820190505b600115612e9b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612e8f57612e8e615663565b5b04945060008503612e46575b819350505050919050565b612eae61360e565b6000602083612ebd9190615692565b14612ee957602082612ecf9190615692565b6020612edb91906155fb565b82612ee6919061562f565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b612f1d82600383516130f9565b612f30818361327e90919063ffffffff16565b505050565b67ffffffffffffffff811115612f5457612f4f82826132a0565b612f61565b612f60826000836130f9565b5b5050565b612f708160046132ec565b50565b612f7e8160076132ec565b50565b612f8e82600283516130f9565b612fa1818361327e90919063ffffffff16565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613004577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612ffa57612ff9615663565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613041576d04ee2d6d415b85acef8100000000838161303757613036615663565b5b0492506020810190505b662386f26fc10000831061307057662386f26fc10000838161306657613065615663565b5b0492506010810190505b6305f5e1008310613099576305f5e100838161308f5761308e615663565b5b0492506008810190505b61271083106130be5761271083816130b4576130b3615663565b5b0492506004810190505b606483106130e157606483816130d7576130d6615663565b5b0492506002810190505b600a83106130f0576001810190505b80915050919050565b60178167ffffffffffffffff16116131305761312a8160058460ff16901b60ff16178461330e90919063ffffffff16565b50613279565b60ff8167ffffffffffffffff16116131865761315f601860058460ff16901b178461330e90919063ffffffff16565b506131808167ffffffffffffffff1660018561332e9092919063ffffffff16565b50613278565b61ffff8167ffffffffffffffff16116131dd576131b6601960058460ff16901b178461330e90919063ffffffff16565b506131d78167ffffffffffffffff1660028561332e9092919063ffffffff16565b50613277565b63ffffffff8167ffffffffffffffff16116132365761320f601a60058460ff16901b178461330e90919063ffffffff16565b506132308167ffffffffffffffff1660048561332e9092919063ffffffff16565b50613276565b613253601b60058460ff16901b178461330e90919063ffffffff16565b506132748167ffffffffffffffff1660088561332e9092919063ffffffff16565b505b5b5b5b505050565b61328661360e565b61329883846000015151848551613350565b905092915050565b6132be60026005600660ff16901b178361330e90919063ffffffff16565b506132e882826040516020016132d49190614022565b604051602081830303815290604052612f81565b5050565b613309601f60058360ff16901b178361330e90919063ffffffff16565b505050565b61331661360e565b613326838460000151518461343f565b905092915050565b61333661360e565b613347848560000151518585613495565b90509392505050565b61335861360e565b825182111561336657600080fd5b84602001518285613377919061562f565b11156133ac576133ab85600261339c88602001518887613397919061562f565b613523565b6133a691906156c3565b61353f565b5b6000808651805187602083010193508088870111156133cb5787860182525b60208701925050505b6020841061341257805182526020826133ed919061562f565b91506020816133fc919061562f565b905060208461340b91906155fb565b93506133d4565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b61344761360e565b8360200151831061346d5761346c846002866020015161346791906156c3565b61353f565b5b83518051602085830101848153818603613488576001820183525b5050508390509392505050565b61349d61360e565b846020015184836134ae919061562f565b11156134d6576134d585600286856134c6919061562f565b6134d091906156c3565b61353f565b5b60006001836101006134e89190615838565b6134f291906155fb565b905085518386820101858319825116178152815185880111156135155784870182525b505085915050949350505050565b60008183111561353557829050613539565b8190505b92915050565b6000826000015190506135528383612ea6565b5061355d838261327e565b50505050565b6040518060c00160405280600060018111156135825761358161549e565b5b81526020016000600181111561359b5761359a61549e565b5b81526020016000808111156135b3576135b261549e565b5b81526020016060815260200160608152602001606081525090565b5080546135da90614501565b6000825580601f106135ec575061360b565b601f01602090049060005260206000209081019061360a9190613628565b5b50565b604051806040016040528060608152602001600081525090565b5b80821115613641576000816000905550600101613629565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61368e81613659565b811461369957600080fd5b50565b6000813590506136ab81613685565b92915050565b6000602082840312156136c7576136c661364f565b5b60006136d58482850161369c565b91505092915050565b60008115159050919050565b6136f3816136de565b82525050565b600060208201905061370e60008301846136ea565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561374e578082015181840152602081019050613733565b60008484015250505050565b6000601f19601f8301169050919050565b600061377682613714565b613780818561371f565b9350613790818560208601613730565b6137998161375a565b840191505092915050565b600060208201905081810360008301526137be818461376b565b905092915050565b6000819050919050565b6137d9816137c6565b81146137e457600080fd5b50565b6000813590506137f6816137d0565b92915050565b6000602082840312156138125761381161364f565b5b6000613820848285016137e7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061385482613829565b9050919050565b61386481613849565b82525050565b600060208201905061387f600083018461385b565b92915050565b61388e81613849565b811461389957600080fd5b50565b6000813590506138ab81613885565b92915050565b600080604083850312156138c8576138c761364f565b5b60006138d68582860161389c565b92505060206138e7858286016137e7565b9150509250929050565b600067ffffffffffffffff82169050919050565b61390e816138f1565b82525050565b60006020820190506139296000830184613905565b92915050565b6000819050919050565b6139428161392f565b811461394d57600080fd5b50565b60008135905061395f81613939565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6139a78261375a565b810181811067ffffffffffffffff821117156139c6576139c561396f565b5b80604052505050565b60006139d9613645565b90506139e5828261399e565b919050565b600067ffffffffffffffff821115613a0557613a0461396f565b5b613a0e8261375a565b9050602081019050919050565b82818337600083830152505050565b6000613a3d613a38846139ea565b6139cf565b905082815260208101848484011115613a5957613a5861396a565b5b613a64848285613a1b565b509392505050565b600082601f830112613a8157613a80613965565b5b8135613a91848260208601613a2a565b91505092915050565b600080600060608486031215613ab357613ab261364f565b5b6000613ac186828701613950565b935050602084013567ffffffffffffffff811115613ae257613ae1613654565b5b613aee86828701613a6c565b925050604084013567ffffffffffffffff811115613b0f57613b0e613654565b5b613b1b86828701613a6c565b9150509250925092565b600067ffffffffffffffff821115613b4057613b3f61396f565b5b613b498261375a565b9050602081019050919050565b6000613b69613b6484613b25565b6139cf565b905082815260208101848484011115613b8557613b8461396a565b5b613b90848285613a1b565b509392505050565b600082601f830112613bad57613bac613965565b5b8135613bbd848260208601613b56565b91505092915050565b60008060008060008060c08789031215613be357613be261364f565b5b6000613bf189828a0161389c565b965050602087013567ffffffffffffffff811115613c1257613c11613654565b5b613c1e89828a01613b98565b955050604087013567ffffffffffffffff811115613c3f57613c3e613654565b5b613c4b89828a01613b98565b945050606087013567ffffffffffffffff811115613c6c57613c6b613654565b5b613c7889828a01613b98565b935050608087013567ffffffffffffffff811115613c9957613c98613654565b5b613ca589828a01613b98565b92505060a087013567ffffffffffffffff811115613cc657613cc5613654565b5b613cd289828a01613b98565b9150509295509295509295565b613ce88161392f565b82525050565b6000602082019050613d036000830184613cdf565b92915050565b600080600060608486031215613d2257613d2161364f565b5b6000613d308682870161389c565b9350506020613d418682870161389c565b9250506040613d52868287016137e7565b9150509250925092565b600067ffffffffffffffff821115613d7757613d7661396f565b5b602082029050602081019050919050565b600080fd5b6000613da0613d9b84613d5c565b6139cf565b90508083825260208201905060208402830185811115613dc357613dc2613d88565b5b835b81811015613e0a57803567ffffffffffffffff811115613de857613de7613965565b5b808601613df58982613b98565b85526020850194505050602081019050613dc5565b5050509392505050565b600082601f830112613e2957613e28613965565b5b8135613e39848260208601613d8d565b91505092915050565b613e4b816138f1565b8114613e5657600080fd5b50565b600081359050613e6881613e42565b92915050565b600063ffffffff82169050919050565b613e8781613e6e565b8114613e9257600080fd5b50565b600081359050613ea481613e7e565b92915050565b600080600080600060a08688031215613ec657613ec561364f565b5b600086013567ffffffffffffffff811115613ee457613ee3613654565b5b613ef088828901613b98565b955050602086013567ffffffffffffffff811115613f1157613f10613654565b5b613f1d88828901613a6c565b945050604086013567ffffffffffffffff811115613f3e57613f3d613654565b5b613f4a88828901613e14565b9350506060613f5b88828901613e59565b9250506080613f6c88828901613e95565b9150509295509295909350565b60008060408385031215613f9057613f8f61364f565b5b6000613f9e8582860161389c565b9250506020613faf85828601613950565b9150509250929050565b600060208284031215613fcf57613fce61364f565b5b6000613fdd84828501613e95565b91505092915050565b600060208284031215613ffc57613ffb61364f565b5b600061400a8482850161389c565b91505092915050565b61401c816137c6565b82525050565b60006020820190506140376000830184614013565b92915050565b6000806000606084860312156140565761405561364f565b5b600084013567ffffffffffffffff81111561407457614073613654565b5b61408086828701613b98565b935050602084013567ffffffffffffffff8111156140a1576140a0613654565b5b6140ad86828701613b98565b92505060406140be8682870161389c565b9150509250925092565b6140d1816136de565b81146140dc57600080fd5b50565b6000813590506140ee816140c8565b92915050565b6000806040838503121561410b5761410a61364f565b5b60006141198582860161389c565b925050602061412a858286016140df565b9150509250929050565b6000806000806080858703121561414e5761414d61364f565b5b600061415c8782880161389c565b945050602061416d8782880161389c565b935050604061417e878288016137e7565b925050606085013567ffffffffffffffff81111561419f5761419e613654565b5b6141ab87828801613a6c565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60006141de826141b7565b6141e881856141c2565b93506141f8818560208601613730565b6142018161375a565b840191505092915050565b6000602082019050818103600083015261422681846141d3565b905092915050565b600080fd5b600080fd5b6002811061424557600080fd5b50565b60008135905061425781614238565b92915050565b6001811061426a57600080fd5b50565b60008135905061427c8161425d565b92915050565b600060c082840312156142985761429761422e565b5b6142a260c06139cf565b905060006142b284828501614248565b60008301525060206142c684828501614248565b60208301525060406142da8482850161426d565b604083015250606082013567ffffffffffffffff8111156142fe576142fd614233565b5b61430a84828501613b98565b606083015250608082013567ffffffffffffffff81111561432e5761432d614233565b5b61433a84828501613a6c565b60808301525060a082013567ffffffffffffffff81111561435e5761435d614233565b5b61436a84828501613e14565b60a08301525092915050565b600080600080608085870312156143905761438f61364f565b5b600085013567ffffffffffffffff8111156143ae576143ad613654565b5b6143ba87828801614282565b94505060206143cb87828801613e59565b93505060406143dc87828801613e95565b92505060606143ed878288016137e7565b91505092959194509250565b60006bffffffffffffffffffffffff82169050919050565b61441a816143f9565b82525050565b60006020820190506144356000830184614411565b92915050565b600080604083850312156144525761445161364f565b5b60006144608582860161389c565b92505060206144718582860161389c565b9150509250929050565b6000602082840312156144915761449061364f565b5b600061449f84828501613e59565b91505092915050565b6144b181613e6e565b82525050565b60006020820190506144cc60008301846144a8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061451957607f821691505b60208210810361452c5761452b6144d2565b5b50919050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b600061458e602c8361371f565b915061459982614532565b604082019050919050565b600060208201905081810360008301526145bd81614581565b9050919050565b7f4e6565647320746f2062652076616c696420696e737469747574650000000000600082015250565b60006145fa601b8361371f565b9150614605826145c4565b602082019050919050565b60006020820190508181036000830152614629816145ed565b9050919050565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b600061468c60308361371f565b915061469782614630565b604082019050919050565b600060208201905081810360008301526146bb8161467f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f546f6b656e20616c7265616479206275726e6564000000000000000000000000600082015250565b600061472760148361371f565b9150614732826146f1565b602082019050919050565b600060208201905081810360008301526147568161471a565b9050919050565b60006040820190506147726000830185614013565b8181036020830152614784818461376b565b90509392505050565b7f4e6f2073756666696369656e74207269676874206173206f776e657200000000600082015250565b60006147c3601c8361371f565b91506147ce8261478d565b602082019050919050565b600060208201905081810360008301526147f2816147b6565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061482f60188361371f565b915061483a826147f9565b602082019050919050565b6000602082019050818103600083015261485e81614822565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006148c160298361371f565b91506148cc82614865565b604082019050919050565b600060208201905081810360008301526148f0816148b4565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061492d60168361371f565b9150614938826148f7565b602082019050919050565b6000602082019050818103600083015261495c81614920565b9050919050565b7f4e6f2073756666696369656e7420726967687400000000000000000000000000600082015250565b600061499960138361371f565b91506149a482614963565b602082019050919050565b600060208201905081810360008301526149c88161498c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614a317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826149f4565b614a3b86836149f4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614a78614a73614a6e846137c6565b614a53565b6137c6565b9050919050565b6000819050919050565b614a9283614a5d565b614aa6614a9e82614a7f565b848454614a01565b825550505050565b600090565b614abb614aae565b614ac6818484614a89565b505050565b5b81811015614aea57614adf600082614ab3565b600181019050614acc565b5050565b601f821115614b2f57614b00816149cf565b614b09846149e4565b81016020851015614b18578190505b614b2c614b24856149e4565b830182614acb565b50505b505050565b600082821c905092915050565b6000614b5260001984600802614b34565b1980831691505092915050565b6000614b6b8383614b41565b9150826002028217905092915050565b614b8482613714565b67ffffffffffffffff811115614b9d57614b9c61396f565b5b614ba78254614501565b614bb2828285614aee565b600060209050601f831160018114614be55760008415614bd3578287015190505b614bdd8582614b5f565b865550614c45565b601f198416614bf3866149cf565b60005b82811015614c1b57848901518255600182019150602085019450602081019050614bf6565b86831015614c385784890151614c34601f891682614b41565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614c87826137c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614cb957614cb8614c4d565b5b600182019050919050565b600081905092915050565b6000614cda82613714565b614ce48185614cc4565b9350614cf4818560208601613730565b80840191505092915050565b6000614d0c8285614ccf565b9150614d188284614ccf565b91508190509392505050565b6000614d37614d32846139ea565b6139cf565b905082815260208101848484011115614d5357614d5261396a565b5b614d5e848285613730565b509392505050565b600082601f830112614d7b57614d7a613965565b5b8151614d8b848260208601614d24565b91505092915050565b600060208284031215614daa57614da961364f565b5b600082015167ffffffffffffffff811115614dc857614dc7613654565b5b614dd484828501614d66565b91505092915050565b6000608082019050614df26000830187613905565b8181036020830152614e0481866141d3565b9050614e1360408301856144a8565b614e206060830184614013565b95945050505050565b614e32816143f9565b8114614e3d57600080fd5b50565b600081519050614e4f81614e29565b92915050565b600060208284031215614e6b57614e6a61364f565b5b6000614e7984828501614e40565b91505092915050565b6000614e8d826137c6565b915060008203614ea057614e9f614c4d565b5b600182039050919050565b60008190508160005260206000209050919050565b601f821115614f0157614ed281614eab565b614edb846149e4565b81016020851015614eea578190505b614efe614ef6856149e4565b830182614acb565b50505b505050565b614f0f826141b7565b67ffffffffffffffff811115614f2857614f2761396f565b5b614f328254614501565b614f3d828285614ec0565b600060209050601f831160018114614f705760008415614f5e578287015190505b614f688582614b5f565b865550614fd0565b601f198416614f7e86614eab565b60005b82811015614fa657848901518255600182019150602085019450602081019050614f81565b86831015614fc35784890151614fbf601f891682614b41565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152614ff281856141d3565b9050818103602083015261500681846141d3565b90509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061504560208361371f565b91506150508261500f565b602082019050919050565b6000602082019050818103600083015261507481615038565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006150b1601c8361371f565b91506150bc8261507b565b602082019050919050565b600060208201905081810360008301526150e0816150a4565b9050919050565b7f7b22696e737469747574655f6e616d65223a0000000000000000000000000000600082015250565b600061511d601283614cc4565b9150615128826150e7565b601282019050919050565b7f22636f6d70616e795f6e616d65223a0000000000000000000000000000000000600082015250565b6000615169600f83614cc4565b915061517482615133565b600f82019050919050565b7f2c2022636172626f6e5f63726564697473223a00000000000000000000000000600082015250565b60006151b5601383614cc4565b91506151c08261517f565b601382019050919050565b7f2c202269737375655f64617465223a0000000000000000000000000000000000600082015250565b6000615201600f83614cc4565b915061520c826151cb565b600f82019050919050565b7f2c2022696e6475737472795f6964223a00000000000000000000000000000000600082015250565b600061524d601083614cc4565b915061525882615217565b601082019050919050565b7f2c20226465736372697074696f6e223a00000000000000000000000000000000600082015250565b6000615299601083614cc4565b91506152a482615263565b601082019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006152e5600183614cc4565b91506152f0826152af565b600182019050919050565b600061530682615110565b91506153128289614ccf565b915061531d8261515c565b91506153298288614ccf565b9150615334826151a8565b91506153408287614ccf565b915061534b826151f4565b91506153578286614ccf565b915061536282615240565b915061536e8285614ccf565b91506153798261528c565b91506153858284614ccf565b9150615390826152d8565b9150819050979650505050505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006153fc602e8361371f565b9150615407826153a0565b604082019050919050565b6000602082019050818103600083015261542b816153ef565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061546860168361371f565b915061547382615432565b602082019050919050565b600060208201905081810360008301526154978161545b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006060820190506154e26000830186613905565b81810360208301526154f481856141d3565b905061550360408301846144a8565b949350505050565b60008151905061551a81613939565b92915050565b6000602082840312156155365761553561364f565b5b60006155448482850161550b565b91505092915050565b60008151905061555c81613885565b92915050565b6000602082840312156155785761557761364f565b5b60006155868482850161554d565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006155c560178361371f565b91506155d08261558f565b602082019050919050565b600060208201905081810360008301526155f4816155b8565b9050919050565b6000615606826137c6565b9150615611836137c6565b925082820390508181111561562957615628614c4d565b5b92915050565b600061563a826137c6565b9150615645836137c6565b925082820190508082111561565d5761565c614c4d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061569d826137c6565b91506156a8836137c6565b9250826156b8576156b7615663565b5b828206905092915050565b60006156ce826137c6565b91506156d9836137c6565b92508282026156e7816137c6565b915082820484148315176156fe576156fd614c4d565b5b5092915050565b60008160011c9050919050565b6000808291508390505b600185111561575c5780860481111561573857615737614c4d565b5b60018516156157475780820291505b808102905061575585615705565b945061571c565b94509492505050565b6000826157755760019050615831565b816157835760009050615831565b816001811461579957600281146157a3576157d2565b6001915050615831565b60ff8411156157b5576157b4614c4d565b5b8360020a9150848211156157cc576157cb614c4d565b5b50615831565b5060208310610133831016604e8410600b84101617156158075782820a90508381111561580257615801614c4d565b5b615831565b6158148484846001615712565b9250905081840481111561582b5761582a614c4d565b5b81810290505b9392505050565b6000615843826137c6565b915061584e836137c6565b925061587b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615765565b90509291505056fea2646970667358221220bb7f19aaed041e10b29aed0c1c3330fd5d0c9e04fe235f4157d52c8055963bcd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "params": {
          "gasLimit": "gas limit for the fulfillment callback",
          "req": "The initialized Functions.Request",
          "subscriptionId": "The subscription ID"
        },
        "returns": {
          "_0": "billedCost Cost in Juels (1e18) of LINK"
        }
      },
      "getDONPublicKey()": {
        "details": "All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key",
        "returns": {
          "_0": "publicKey DON's public key"
        }
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "params": {
          "err": "Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the user code."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "updateOracleAddress(address)": {
        "params": {
          "oracle": "New oracle address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "notice": "Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"
      },
      "getDONPublicKey()": {
        "notice": "Returns the DON's secp256k1 public key used to encrypt secrets"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "updateOracleAddress(address)": {
        "notice": "Allows the Functions oracle address to be updated"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4543,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4545,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4549,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4553,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4557,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4563,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5609,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 11071,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11073,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "institutes_count",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11078,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "institutes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Institute)11069_storage)"
      },
      {
        "astId": 541,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "s_oracle",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(FunctionsOracleInterface)970"
      },
      {
        "astId": 545,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 27,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "s_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 11238,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 11245,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)6153_storage"
      },
      {
        "astId": 11257,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "16",
        "type": "t_bytes32"
      },
      {
        "astId": 11259,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "latestResponse",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes_storage"
      },
      {
        "astId": 11261,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "latestError",
        "offset": 0,
        "slot": "18",
        "type": "t_bytes_storage"
      },
      {
        "astId": 11264,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "gasLimit",
        "offset": 0,
        "slot": "19",
        "type": "t_uint32"
      },
      {
        "astId": 11267,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "subscriptionId",
        "offset": 4,
        "slot": "19",
        "type": "t_uint64"
      },
      {
        "astId": 11278,
        "contract": "contracts/SbtConvertible.sol:SbtConvertible",
        "label": "source",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FunctionsOracleInterface)970": {
        "encoding": "inplace",
        "label": "contract FunctionsOracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Institute)11069_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Institutes.Institute)",
        "numberOfBytes": "32",
        "value": "t_struct(Institute)11069_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)6153_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6152,
            "contract": "contracts/SbtConvertible.sol:SbtConvertible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Institute)11069_storage": {
        "encoding": "inplace",
        "label": "struct Institutes.Institute",
        "members": [
          {
            "astId": 11064,
            "contract": "contracts/SbtConvertible.sol:SbtConvertible",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11066,
            "contract": "contracts/SbtConvertible.sol:SbtConvertible",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11068,
            "contract": "contracts/SbtConvertible.sol:SbtConvertible",
            "label": "active",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}